define('xtil', [
    'exports',
    'crypto',
    'babel-runtime/helpers/interop-require-default',
    './slug'
], function (exports, _crypto, _babelRuntimeHelpersInteropRequireDefault, _slug) {
    exports.__esModule = true;
    var _crypto2 = _babelRuntimeHelpersInteropRequireDefault['default'](_crypto);
    var dontEnumBug = !{ toString: 1 }.propertyIsEnumerable('toString');
    var inherits = function inherits(type, superType) {
        var Empty = function Empty() {
        };
        Empty.prototype = superType.prototype;
        var proto = new Empty();
        var originalPrototype = type.prototype;
        type.prototype = proto;
        for (var key in originalPrototype) {
            proto[key] = originalPrototype[key];
        }
        if (dontEnumBug) {
            if (originalPrototype.hasOwnProperty('toString')) {
                proto.toString = originalPrototype.toString;
            }
            if (originalPrototype.hasOwnProperty('valueOf')) {
                proto.valueOf = originalPrototype.valueOf;
            }
        }
        type.prototype.constructor = type;
        return type;
    };
    exports.inherits = inherits;
    var relative = function relative(from, to) {
        var trim = function trim(arr) {
            var start = 0;
            for (; start < arr.length; start++) {
                if (arr[start] !== '') {
                    break;
                }
            }
            var end = arr.length - 1;
            for (; end >= 0; end--) {
                if (arr[end] !== '') {
                    break;
                }
            }
            if (start > end) {
                return [];
            }
            return arr.slice(start, end + 1);
        };
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        var i = 0;
        for (i = 0; i < length; i++) {
            if (fromParts[i] !== toParts[i]) {
                samePartsLength = i;
                break;
            }
        }
        var outputParts = [];
        for (i = samePartsLength; i < fromParts.length; i++) {
            outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
    };
    exports.relative = relative;
    var toSlug = function toSlug(text) {
        var slug = encodeURIComponent(text.replace(/^[\s\u00A0]+|[\s\u00A0]+$/g, '')).replace(/%/g, '.');
        slug = slug.replace(/\(/g, '.28').replace(/\)/g, '.29').replace(/\.\./g, '.');
        if (slug.length > 64) {
            var md5sum = _crypto2['default'].createHash('md5');
            md5sum.update(slug);
            return md5sum.digest('hex').replace(/(\w{2})/g, '.$1').toUpperCase();
        }
        return slug;
    };
    exports.toSlug = toSlug;
    var isAbsHref = function isAbsHref(href) {
        return /^(https?:)?\/\//.test(href);
    };
    exports.isAbsHref = isAbsHref;
    var fixHref = function fixHref(href) {
        if (!isAbsHref(href)) {
            var path = '';
            var hash = '';
            var placeholder = String.fromCharCode(57005) + String.fromCharCode(48879);
            if (/#/.test(href)) {
                var chunks = (placeholder + href).split(/#+/, 2);
                path = (chunks[0] || '').replace(placeholder, '');
                hash = chunks[1] || '';
                if (hash) {
                    hash = '#' + toSlug(hash);
                }
            } else {
                path = href;
            }
            if (path && !/\.(md|html?)$/.test(path)) {
                path += '.md';
            }
            if (typeof process === 'object') {
                if (process.env.NODE_ENV === 'production') {
                    path = path.replace(/\.md$/, '.html');
                }
            } else {
                if (/\.html?$/.test(location.pathname)) {
                    path = path.replace(/\.md$/, '.html');
                }
            }
            return path + hash;
        }
        return href;
    };
    exports.fixHref = fixHref;
    var escapeRegexp = function escapeRegexp(string) {
        return string.replace(/[|\\{}()[\]^$+*?.]/g, '\\$&').replace(/\s+/g, '\\s+');
    };
    exports.escapeRegexp = escapeRegexp;
    var unescapeHtml = function unescapeHtml(text) {
        return text.replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '"').replace(/&#39;/g, '\'').replace(/&amp;/g, '&').replace(/&ldquo;/g, '\u201C').replace(/&rdquo;/g, '\u201D').replace(/&emsp;/g, ' ').replace(/&times;/g, '\xD7').replace(/&nbsp;/g, ' ');
    };
    exports.unescapeHtml = unescapeHtml;
    var escapeHtml = function escapeHtml(text) {
        return text.replace(/&/g, '&amp;').replace(/>/g, '&gt;').replace(/</g, '&lt;').replace(/"/g, '&quot;').replace(/“/g, '&ldquo;').replace(/”/g, '&rdquo;').replace(/ /g, '&nbsp;').replace(/×/g, '&times;');
    };
    exports.escapeHtml = escapeHtml;
    var getPathname = function getPathname(url) {
        var pathname = url;
        pathname = pathname.replace(/https?:\/\/[^\/]+/, '');
        pathname = pathname.replace(/#.*/, '');
        if (pathname === 'about:blank') {
            pathname = location.pathname;
        }
        return pathname;
    };
    var getHashname = function getHashname(url) {
        var hash = url.split('/').pop();
        if (_slug.isValid(hash)) {
            hash = _slug.decode(hash);
        }
        return '#' + hash.replace(/\.(md|html)/, '');
    };
    var resolveUrl = function resolveUrl(url) {
        var element = document.createElement('DIV');
        element.innerHTML = '<a href="' + escapeHtml(url) + '"></a>';
        var anchor = element.firstChild;
        var pathname = getPathname(anchor.href);
        return {
            pathname: _slug.getDocumentPath(pathname),
            hash: anchor.hash ? anchor.hash : getHashname(pathname)
        };
    };
    exports.resolveUrl = resolveUrl;
});